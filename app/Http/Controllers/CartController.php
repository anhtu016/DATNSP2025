<?php

namespace App\Http\Controllers;
use Illuminate\Http\Request;
use App\Models\Product;
use App\Models\AttributeValue;
use App\Models\Variant;
use App\Models\Coupon;
use Carbon\Carbon;
use App\Models\Order;
class CartController extends Controller
{

   public function viewCart()
{
    $cart = session()->get('cart', []);
    
    // T√≠nh t·ªïng gi√° tr·ªã gi·ªè h√†ng
    $cartTotal = 0;
    foreach ($cart as $item) {
        $cartTotal += $item['price'] * $item['quantity'];
    }

   
    $now = now();

    $coupons = Coupon::where('start_date', '<=', $now)
                ->where('end_date', '>=', $now)
                ->where(function($query) use ($cartTotal) {
                    $query->where('min_order_value', '<=', $cartTotal)
                          ->orWhereNull('min_order_value');
                })
                ->where(function($query) {
                    $query->whereColumn('usage_count', '<', 'usage_limit')
                          ->orWhereNull('usage_limit');
                })
                ->orderBy('value', 'desc') // Coupon gi√° tr·ªã gi·∫£m cao h∆°n ∆∞u ti√™n tr∆∞·ªõc
                ->take(3)
                ->get();

    // Ki·ªÉm tra xem c√≥ m√£ gi·∫£m gi√° h·ª£p l·ªá hay kh√¥ng
    $hasValidCoupon = $coupons->isNotEmpty();

    return view('client.cart', compact('cart', 'coupons', 'hasValidCoupon'));
}

    


public function addToCart(Request $request, $id)
{
    $product = Product::findOrFail($id);
    $attributes = $request->input('attributes', []);
    $quantity = $request->input('quantity', 1);

    $colorId = $attributes['Color'] ?? null;
    $sizeId = $attributes['Size'] ?? null;

    if (!$colorId || !$sizeId) {
        return redirect()->back()->with('error', 'Vui l√≤ng ch·ªçn thu·ªôc t√≠nh.');
    }

    $color = AttributeValue::find($colorId);
    $size = AttributeValue::find($sizeId);

    if (!$color || !$size) {
        return redirect()->back()->with('error', 'Thu·ªôc t√≠nh kh√¥ng h·ª£p l·ªá.');
    }

    $variant = Variant::where('product_id', $id)
        ->whereHas('attributeValues', function ($query) use ($colorId, $sizeId) {
            $query->whereIn('attribute_value_id', [$colorId, $sizeId]);
        }, '=', 2)
        ->first();

    if (!$variant) {
        return redirect()->back()->with('error', 'Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ ph√π h·ª£p.');
    }

    if (!is_numeric($variant->quantity_variant) || $variant->quantity_variant < $quantity) {
        return redirect()->back()->with('error', 'S·ªë l∆∞·ª£ng t·ªìn kho kh√¥ng ƒë·ªß.');
    }

    $variantImage = $variant->image_variant ?? $product->thumbnail ?? 'client/img/default.png';

    $cartItemId = $id . '-' . $colorId . '-' . $sizeId;
    $cart = session()->get('cart', []);

    if (isset($cart[$cartItemId])) {
        $newQuantity = $cart[$cartItemId]['quantity'] + $quantity;

        if ($variant->quantity_variant < $newQuantity) {
            return redirect()->back()->with('error', 'S·ªë l∆∞·ª£ng t·ªìn kho kh√¥ng ƒë·ªß ƒë·ªÉ th√™m ti·∫øp.');
        }

        $cart[$cartItemId]['quantity'] = $newQuantity;
        $cart[$cartItemId]['quantity_variant'] = $variant->quantity_variant; // ‚úÖ c·∫≠p nh·∫≠t l·∫°i
    } else {
        $cart[$cartItemId] = [
            'id' => $product->id,
            'name' => $product->name,
            'price' => $product->price,
            'quantity' => $quantity,
            'Color' => $color->value,
            'Size' => $size->value,
            'thumbnail' => $variantImage,
            'variant_id' => $variant->id,
            'quantity_variant' => $variant->quantity_variant, // ‚úÖ th√™m v√†o ƒë√¢y
        ];
    }

    session()->put('cart', $cart);

    return redirect()->back()->with('success', 'ƒê√£ th√™m v√†o gi·ªè h√†ng');
}

    


public function removeFromCart($id)
{
    $cart = session()->get('cart', []);

    if (isset($cart[$id])) {
        unset($cart[$id]);
        session()->put('cart', $cart);
    }

    return redirect()->route('cart.view')->with('success', 'ƒê√£ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng.');
}
// c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
public function update(Request $request, $id)
{
    $cart = session()->get('cart', []);

    if (isset($cart[$id])) {
        $cart[$id]['quantity'] = $request->quantity;
        session()->put('cart', $cart);

        // T√≠nh l·∫°i t·ªïng gi√° tr·ªã gi·ªè h√†ng
        $updatedSubtotal = 0;
        $updatedTotal = 0;
        foreach ($cart as $item) {
            $itemTotal = $item['price'] * $item['quantity'];
            $updatedSubtotal += $itemTotal;
        }

        // Tr·∫£ v·ªÅ d·ªØ li·ªáu JSON v·ªõi c√°c th√¥ng tin c·∫ßn thi·∫øt
        return response()->json([
            'success' => true,
            'updatedSubtotal' => number_format($updatedSubtotal),
            'updatedTotal' => number_format($updatedSubtotal) // ho·∫∑c t√≠nh to√°n t·ªïng n·∫øu c√≥ gi·∫£m gi√°
        ]);
    }

    return response()->json(['success' => false, 'message' => 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i trong gi·ªè h√†ng.']);
}

// x·ª≠ l√Ω m√£ gi·∫£m gi√° trong gi·ªè h√†ng
// public function applyCoupon(Request $request)
// {
//     $request->validate([
//         'coupon_code' => 'required|string',
//     ]);

//     $selectedItems = $request->input('selected_items', []);
    

//     // ‚úÖ Ki·ªÉm tra n·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ƒë∆∞·ª£c ch·ªçn
//     if (empty($selectedItems)) {
//         return redirect()->back()
//             ->withInput()
//             ->with('error', 'Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt s·∫£n ph·∫©m ƒë·ªÉ √°p d·ª•ng m√£ gi·∫£m gi√°.');
//     }

//     $coupon = Coupon::where('code', $request->coupon_code)->first();
//     if (!$coupon) {
//         return redirect()->back()->with('error', 'M√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá.');
//     }

//     if (Carbon::parse($coupon->end_date)->isPast()) {
//         return redirect()->back()->with('error', 'M√£ gi·∫£m gi√° ƒë√£ h·∫øt h·∫°n.');
//     }

//     $usageCount = Order::where('coupon_code', $coupon->code)->count();
//     if ($coupon->usage_limit > 0 && $usageCount >= $coupon->usage_limit) {
//         return redirect()->back()->with('error', 'M√£ gi·∫£m gi√° ƒë√£ h·∫øt l∆∞·ª£t s·ª≠ d·ª•ng.');
//     }

//     $cart = session()->get('cart', []);
//     $total = 0;

//     // ‚úÖ Ch·ªâ t√≠nh t·ªïng c·ªßa c√°c s·∫£n ph·∫©m ƒë√£ ch·ªçn
//     foreach ($cart as $id => $item) {
//         if (in_array($id, $selectedItems)) {
//             $total += $item['price'] * $item['quantity'];
//         }
//     }

//     if ($total < $coupon->min_order_value) {
//         return redirect()->back()->with('error', 'Gi√° tr·ªã ƒë∆°n h√†ng kh√¥ng ƒë·ªß ƒë·ªÉ √°p d·ª•ng m√£ gi·∫£m gi√°.');
//     }

//     $discountAmount = 0;
//     if ($coupon->type == 'percentage') {
//         $discountAmount = ($total * $coupon->value) / 100;
//         if ($coupon->max_discount_value && $discountAmount > $coupon->max_discount_value) {
//             $discountAmount = $coupon->max_discount_value;
//         }
//     } elseif ($coupon->type == 'fixed') {
//         $discountAmount = min($coupon->value, $total);
//     }

//     $finalTotal = $total - $discountAmount;
//     if ($finalTotal < 0) {
//         $discountAmount = $total;
//         $finalTotal = 0;
//     }

//     // Ph√¢n b·ªï gi·∫£m gi√° theo t·ª∑ l·ªá gi√° t·ª´ng s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn
// $discountPerItem = [];
// foreach ($selectedItems as $id) {
//     if (isset($cart[$id])) {
//         $itemTotal = $cart[$id]['price'] * $cart[$id]['quantity'];
//         $ratio = $itemTotal / $total;
//         $discountPerItem[$id] = round($discountAmount * $ratio); // ph√¢n b·ªï l√†m tr√≤n
//     }
// }

// // L∆∞u session chi ti·∫øt m√£ gi·∫£m gi√°
// session([
//     'coupon' => [
//         'code' => $coupon->code,
//         'type' => $coupon->type,
//         'value' => $coupon->value,
//         'description' => $coupon->description ?? '',
//         'max_discount_value' => $coupon->max_discount_value ?? null,
//         'min_order_value' => $coupon->min_order_value ?? 0,
//         'end_date' => $coupon->end_date,
//         'selected_items' => $selectedItems,
//         'discount_amount' => $discountAmount,
//     ],
//     'coupon_applied_items' => $discountPerItem, // üí° danh s√°ch s·∫£n ph·∫©m v√† gi·∫£m gi√° t∆∞∆°ng ·ª©ng
//     'discounted_subtotal' => $finalTotal,
// ]);

//     return redirect()->back()
//         ->withInput()
//         ->with('success', '√Åp d·ª•ng m√£ gi·∫£m gi√° th√†nh c√¥ng!');
// }




//h·ªßy m√£ gi·∫£m gi√° 
// public function removeCoupon()
// {
//     session()->forget('coupon');
//     session()->forget('selectedItems');

//     return redirect()->back()->with('success', 'ƒê√£ h·ªßy m√£ gi·∫£m gi√°.');
// }



}

